Table: Movies
Id	Title	Director	Year	Length_minutes
1	Toy Story	John Lasseter	1995	81
2	A Bug's Life	John Lasseter	1998	95
3	Toy Story 2	John Lasseter	1999	93
4	Monsters, Inc.	Pete Docter	2001	92
5	Finding Nemo	Andrew Stanton	2003	107
6	The Incredibles	Brad Bird	2004	116
7	Cars	John Lasseter	2006	117
8	Ratatouille	Brad Bird	2007	115
9	WALL-E	Andrew Stanton	2008	104
10	Up	Pete Docter	2009	101


Exercise 1 — Tasks
    Find the title of each film
        SELECT title 
        FROM movies;

    Find the director of each film
        SELECT director 
        FROM movies;

    Find the title and director of each film
        SELECT title, director 
        FROM movies;

    Find the title and year of each film
        SELECT title, year 
        FROM movies;

    Find all the information about each film
        SELECT * 
        FROM movies;

Exercise 2 — Tasks

    Find the movie with a row id of 6 
        SELECT * 
        FROM movies
        WHERE id=6;

    Find the movies released in the years between 2000 and 2010
        SELECT * 
        FROM movies
        WHERE year
        BETWEEN 2000 AND 2010;

    Find the movies not released in the years between 2000 and 2010
        SELECT * 
        FROM movies
        WHERE year
        NOT BETWEEN 2000 AND 2010;

    Find the first 5 Pixar movies and their release year
        SELECT * 
        FROM movies
        WHERE id
        BETWEEN 1 AND 5;

Exercise 3 — Tasks

    Find all the Toy Story movies
        SELECT * 
        FROM movies
        WHERE Title 
        LIKE '%Toy Story%';

    Find all the movies directed by John Lasseter
        SELECT * 
        FROM movies
        WHERE Director 
        LIKE '%John%';

    Find all the movies (and director) not directed by John Lasseter 
        SELECT * 
        FROM movies
        WHERE Director 
        NOT LIKE '%John%';

    Find all the WALL-* movies 
        SELECT * 
        FROM movies
        WHERE Title 
        LIKE '%WALL%';

Exercise 4 — Tasks
    List all directors of Pixar movies (alphabetically), without duplicates
        SELECT DISTINCT Director 
        FROM movies
        ORDER BY Director ASC;

    List the last four Pixar movies released (ordered from most recent to least)
        Select *
        From movies
        ORDER BY year desc
        LIMIT 4;

    List the first five Pixar movies sorted alphabetically
        Select *
        From movies
        ORDER BY title ASC
        LIMIT 5;

    List the next five Pixar movies sorted alphabetically
        Select *
        From movies
        ORDER BY title ASC
        LIMIT 5 OFFSET 5;

    Review Model

    Table: North_american_cities
    City	Country	Population	Latitude	Longitude
    Guadalajara	Mexico	1500800	20.659699	-103.349609
    Toronto	Canada	2795060	43.653226	-79.383184
    Houston	United States	2195914	29.760427	-95.369803
    New York	United States	8405837	40.712784	-74.005941
    Philadelphia	United States	1553165	39.952584	-75.165222
    Havana	Cuba	2106146	23.05407	-82.345189
    Mexico City	Mexico	8555500	19.432608	-99.133208
    Phoenix	United States	1513367	33.448377	-112.074037
    Los Angeles	United States	3884307	34.052234	-118.243685
    Ecatepec de Morelos	Mexico	1742000	19.601841	-99.050674

    List all the Canadian cities and their populations
        SELECT City, Population
        FROM north_american_cities
        WHERE Country
        LIKE'%CANADA%';

    Order all the cities in the United States by their latitude from north to south
        SELECT *
        FROM north_american_cities
        WHERE Country
        LIKE '%United States%'
        ORDER BY Latitude DESC;

    List all the cities west of Chicago, ordered from west to east
        SELECT city, longitude FROM north_american_cities
        WHERE longitude < -87.629798
        ORDER BY longitude ASC;

    List the two largest cities in Mexico (by population)
        SELECT * 
        FROM north_american_cities
        WHERE Country
        LIKE '%Mexico%'
        Order By Population DESC
        LIMIT 2;

    List the third and fourth largest cities (by population) in the United States and their population
        SELECT * 
        FROM north_american_cities
        WHERE Country
        LIKE '%Uni%'
        Order By Population DESC
        LIMIT 2 OFFSET 2
        ;
Exercise 6
    Data Set
    Table: Movies (Read-Only)
    Id	Title	Director	Year	Length_minutes
    1	Toy Story	John Lasseter	1995	81
    2	A Bug's Life	John Lasseter	1998	95
    3	Toy Story 2	John Lasseter	1999	93
    4	Monsters, Inc.	Pete Docter	2001	92
    5	Finding Nemo	Andrew Stanton	2003	107
    6	The Incredibles	Brad Bird	2004	116
    7	Cars	John Lasseter	2006	117
    8	Ratatouille	Brad Bird	2007	115
    9	WALL-E	Andrew Stanton	2008	104
    10	Up	Pete Docter	2009	101
    11	Toy Story 3	Lee Unkrich	2010	103
    12	Cars 2	John Lasseter	2011	120
    13	Brave	Brenda Chapman	2012	102
    14	Monsters University	Dan Scanlon	2013	110

    Table: Boxoffice (Read-Only)
    Movie_id	Rating	Domestic_sales	International_sales
    5	8.2	380843261	555900000
    14	7.4	268492764	475066843
    8	8	206445654	417277164
    12	6.4	191452396	368400000
    3	7.9	245852179	239163000
    6	8	261441092	370001000
    9	8.5	223808164	297503696
    11	8.4	415004880	648167031
    1	8.3	191796233	170162503
    7	7.2	244082982	217900167
    10	8.3	293004164	438338580
    4	8.1	289916256	272900000
    2	7.2	162798565	200600000
    13	7.2	237283207	301700000


    Find the domestic and international sales for each movie 
        SELECT * 
        FROM movies
        INNER JOIN boxoffice
            on movies.id = boxoffice.movie_id;

    Show the sales numbers for each movie that did better internationally rather than domestically
        SELECT * 
        FROM movies
        INNER JOIN boxoffice
            ON movies.id = boxoffice.movie_id
        where domestic_sales < international_sales;

    List all the movies by their ratings in descending order
        SELECT * 
        FROM movies
        INNER JOIN boxoffice
            ON movies.id = boxoffice.movie_id
        ORDER BY Rating DESC;

Exercise 7 — Tasks
    Data Set
    Table: Buildings (Read-Only)
    Building_name	Capacity
    1e	24
    1w	32
    2e	16
    2w	20

    Table: Employees (Read-Only)
    Role	Name	Building	Years_employed
    Engineer	Becky A.	1e	4
    Engineer	Dan B.	1e	2
    Engineer	Sharon F.	1e	6
    Engineer	Dan M.	1e	4
    Engineer	Malcom S.	1e	1
    Artist	Tylar S.	2w	2
    Artist	Sherman D.	2w	8
    Artist	Jakob J.	2w	6
    Artist	Lillia A.	2w	7
    Artist	Brandon J.	2w	7
    Manager	Scott K.	1e	9
    Manager	Shirlee M.	1e	3
    Manager	Daria O.	2w	6


    Find the list of all buildings that have employees
        SELECT DISTINCT building
        FROM employees;

    Find the list of all buildings and their capacity
        SELECT building_name, capacity
        FROM Buildings ;

    List all buildings and the distinct employee roles in each building (including empty buildings) 
        SELECT DISTINCT role, building_name
        FROM buildings
            LEFT JOIN employees
            ON buildings.building_name = employees.building;

    Find the name and role of all employees who have not been assigned to a building
        SELECT Name, Role
        FROM employees
        WHERE building IS NULL;

    Find the names of the buildings that hold no employees 
        SELECT *
        FROM buildings 
        LEFT JOIN employees
            ON building_name = building
            WHERE role IS NULL;

Exercise 9 — Tasks
    Data Set
    Table: Movies (Read-Only)
    Id	Title	Director	Year	Length_minutes
    1	Toy Story	John Lasseter	1995	81
    2	A Bug's Life	John Lasseter	1998	95
    3	Toy Story 2	John Lasseter	1999	93
    4	Monsters, Inc.	Pete Docter	2001	92
    5	Finding Nemo	Andrew Stanton	2003	107
    6	The Incredibles	Brad Bird	2004	116
    7	Cars	John Lasseter	2006	117
    8	Ratatouille	Brad Bird	2007	115
    9	WALL-E	Andrew Stanton	2008	104
    10	Up	Pete Docter	2009	101
    11	Toy Story 3	Lee Unkrich	2010	103
    12	Cars 2	John Lasseter	2011	120
    13	Brave	Brenda Chapman	2012	102
    14	Monsters University	Dan Scanlon	2013	110

    Table: Boxoffice (Read-Only)
    Movie_id	Rating	Domestic_sales	International_sales
    5	8.2	380843261	555900000
    14	7.4	268492764	475066843
    8	8	206445654	417277164
    12	6.4	191452396	368400000
    3	7.9	245852179	239163000
    6	8	261441092	370001000
    9	8.5	223808164	297503696
    11	8.4	415004880	648167031
    1	8.3	191796233	170162503
    7	7.2	244082982	217900167
    10	8.3	293004164	438338580
    4	8.1	289916256	272900000
    2	7.2	162798565	200600000
    13	7.2	237283207	301700000

    List all movies and their combined sales in millions of dollars
        SELECT title, (domestic_sales + international_sales) / 1000000 AS gross_sales_millions
        FROM movies
        JOIN boxoffice
            ON movies.id = boxoffice.movie_id;

    List all movies and their ratings in percent
        SELECT title, (rating * 10) AS rating_in_percent
        FROM movies
        JOIN boxoffice
            ON movies.id = boxoffice.movie_id;

    List all movies that were released on even number years
        SELECT title, year
        FROM movies
        WHERE year % 2 = 0;

    Find the number of movies each director has directed
        SELECT DIRECTOR, COUNT(TITLE) AS NUMBER_OF_MOVIES_DIRECTED 
        FROM movies
        GROUP BY DIRECTOR;

    Find the total domestic and international sales that can be attributed to each director
        SELECT DIRECTOR, SUM(DOMESTIC_SALES + INTERNATIONAL_SALES) AS TOTAL_SALE 
        FROM movies
            JOIN BOXOFFICE
                ON ID = MOVIE_ID
        GROUP BY DIRECTOR;
    
Exercise 10

    Data Set
    Table: Employees
    Role	Name	Building	Years_employed
    Engineer	Becky A.	1e	4
    Engineer	Dan B.	1e	2
    Engineer	Sharon F.	1e	6
    Engineer	Dan M.	1e	4
    Engineer	Malcom S.	1e	1
    Artist	Tylar S.	2w	2
    Artist	Sherman D.	2w	8
    Artist	Jakob J.	2w	6
    Artist	Lillia A.	2w	7
    Artist	Brandon J.	2w	7
    Manager	Scott K.	1e	9
    Manager	Shirlee M.	1e	3
    Manager	Daria O.	2w	6

    Find the longest time that an employee has been at the studio
        SELECT MAX(years_employed) as Max_years_employed
        FROM employees;

    For each role, find the average number of years employed by employees in that role
        SELECT ROLE, AVG(YEARS_EMPLOYED)
        FROM EMPLOYEES
        GROUP BY ROLE
        ;

    Find the total number of employee years worked in each building
        SELECT building, SUM(years_employed) as Total_years_employed
        FROM employees
        GROUP BY building;

    Find the number of Artists in the studio (without a HAVING clause)
        SELECT role, COUNT(*) as Number_of_artists
        FROM employees
        WHERE role = "Artist";

        SELECT ROLE, COUNT(NAME) AS ATRIST_IN_STUDIO
        FROM EMPLOYEES
        WHERE ROLE
        LIKE "ARTIST"

        Find the total number of years employed by all Engineers 
        SELECT role, SUM(years_employed)
        FROM employees
        GROUP BY role
        HAVING role = "Engineer";